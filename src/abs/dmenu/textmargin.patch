diff -rNU8 dmenu-4.1.1/config.def.h dmenu-4.1.1.new/config.def.h
--- dmenu-4.1.1/config.def.h	2010-05-29 07:56:51.000000000 -0400
+++ dmenu-4.1.1.new/config.def.h	2010-07-28 16:24:57.000000000 -0400
@@ -2,8 +2,9 @@
 
 /* appearance */
 static const char *font        = "-*-terminus-medium-r-normal-*-14-*-*-*-*-*-*-*";
 static const char *normbgcolor = "#cccccc";
 static const char *normfgcolor = "#000000";
 static const char *selbgcolor  = "#0066ff";
 static const char *selfgcolor  = "#ffffff";
 static unsigned int spaceitem  = 30; /* px between menu items */
+static unsigned int textmargin = 0;
diff -rNU8 dmenu-4.1.1/dmenu.c dmenu-4.1.1.new/dmenu.c
--- dmenu-4.1.1/dmenu.c	2010-05-29 07:56:51.000000000 -0400
+++ dmenu-4.1.1.new/dmenu.c	2010-07-28 16:35:06.000000000 -0400
@@ -133,25 +133,25 @@
 }
 
 void
 calcoffsetsv(void) {
 	static unsigned int h;
 
 	if(!curr)
 		return;
-	h = (dc.font.height + 2) * (lines + 1);
+	h = (dc.font.height + textmargin * 2) * (lines + 1);
 	for(next = curr; next; next=next->right) {
-		h -= dc.font.height + 2;
+		h -= dc.font.height + textmargin * 2;
 		if(h <= 0)
 			break;
 	}
-	h = (dc.font.height + 2) * (lines + 1);
+	h = (dc.font.height + textmargin * 2) * (lines + 1);
 	for(prev = curr; prev && prev->left; prev=prev->left) {
-		h -= dc.font.height + 2;
+		h -= dc.font.height + textmargin * 2;
 		if(h <= 0)
 			break;
 	}
 }
 
 char *
 cistrstr(const char *s, const char *sub) {
 	int c, csub;
@@ -192,17 +192,17 @@
 	XFreePixmap(dpy, dc.drawable);
 	XFreeGC(dpy, dc.gc);
 	XDestroyWindow(dpy, win);
 	XUngrabKeyboard(dpy, CurrentTime);
 }
 
 void
 drawcursor(void) {
-	XRectangle r = { dc.x, dc.y + 2, 1, dc.font.height - 2 };
+	XRectangle r = { dc.x, dc.y + textmargin + 1, 1, dc.font.height - 2 };
 
 	r.x += textnw(text, cursor) + dc.font.height / 2;
 
 	XSetForeground(dpy, dc.gc, dc.norm[ColFG]);
 	XFillRectangles(dpy, dc.drawable, dc.gc, &r, 1);
 }
 
 void
@@ -252,37 +252,37 @@
 	drawtext(next ? ">" : NULL, dc.norm);
 }
 
 void
 drawmenuv(void) {
 	Item *i;
 
 	dc.w = mw - dc.x;
-	dc.y += dc.font.height + 2;
+	dc.y += dc.font.height + textmargin * 2;
 	for(i = curr; i != next; i=i->right) {
 		drawtext(i->text, (sel == i) ? dc.sel : dc.norm);
-		dc.y += dc.font.height + 2;
+		dc.y += dc.font.height + textmargin * 2;
 	}
 	drawtext(NULL, dc.norm);
 }
 
 void
 drawtext(const char *text, unsigned long col[ColLast]) {
 	char buf[256];
 	int i, x, y, h, len, olen;
 	XRectangle r = { dc.x, dc.y, dc.w, dc.h };
 
 	XSetForeground(dpy, dc.gc, col[ColBG]);
 	XFillRectangles(dpy, dc.drawable, dc.gc, &r, 1);
 	if(!text)
 		return;
 	olen = strlen(text);
 	h = dc.font.height;
-	y = dc.y + ((h+2) / 2) - (h / 2) + dc.font.ascent;
+	y = dc.y + textmargin + dc.font.ascent;
 	x = dc.x + (h / 2);
 	/* shorten text if necessary */
 	for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w - h; len--);
 	if(!len)
 		return;
 	memcpy(buf, text, len);
 	if(len < olen)
 		for(i = len; i && i > len - 3; buf[--i] = '.');
@@ -700,17 +700,17 @@
 	initfont(font);
 
 	/* menu window */
 	wa.override_redirect = True;
 	wa.background_pixmap = ParentRelative;
 	wa.event_mask = ExposureMask | ButtonPressMask | KeyPressMask | VisibilityChangeMask;
 
 	/* menu window geometry */
-	mh = (dc.font.height + 2) * (lines + 1);
+	mh = (dc.font.height + textmargin * 2) * (lines + 1);
 #if XINERAMA
 	if(parent == RootWindow(dpy, screen) && XineramaIsActive(dpy) && (info = XineramaQueryScreens(dpy, &n))) {
 		i = 0;
 		if(n > 1) {
 			int di;
 			unsigned int dui;
 			Window dummy;
 			if(XQueryPointer(dpy, parent, &dummy, &dummy, &x, &y, &di, &di, &dui))
@@ -801,16 +801,19 @@
 			if(++i < argc) prompt = argv[i];
 		}
 		else if(!strcmp(argv[i], "-sb")) {
 			if(++i < argc) selbgcolor = argv[i];
 		}
 		else if(!strcmp(argv[i], "-sf")) {
 			if(++i < argc) selfgcolor = argv[i];
 		}
+		else if(!strcmp(argv[i], "-tm")) {
+			if(++i < argc) textmargin = atoi(argv[i]);
+		}
 		else if(!strcmp(argv[i], "-v"))
 			eprint("dmenu-"VERSION", Â© 2006-2010 dmenu engineers, see LICENSE for details\n");
 		else
 			eprint("usage: dmenu [-i] [-b] [-e <xid>] [-l <lines>] [-fn <font>] [-nb <color>]\n"
 			       "             [-nf <color>] [-p <prompt>] [-sb <color>] [-sf <color>] [-v]\n");
 	if(!setlocale(LC_CTYPE, "") || !XSupportsLocale())
 		fprintf(stderr, "warning: no locale support\n");
 	if(!(dpy = XOpenDisplay(NULL)))
